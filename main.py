import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN=os.getenv("BOT_TOKEN")
ADMIN_ID1=os.getenv("ADMIN_ID1")
ADMIN_ID2=os.getenv("ADMIN_ID2")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class AnonymousState(StatesGroup):
    waiting_message = State()

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    
    welcome_text = """
üîí <b>–ë–∞—Ä–ª—ã“ì—ã –∞–Ω–æ–Ω–∏–º–Ω–æ </b>

”®–∑ –∏–¥–µ—è“£–º–µ–Ω –±”©–ª—ñ—Å –æ–Ω—ã –î–∞–Ω–∏—è—Ä –º–µ–∫—Ç–µ–ø—Ç—ñ–Ω –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ñ “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã

125 HS - –¢. –†—ã—Å“õ—É–ª–æ–≤—Ç—ã“£ –≤–∏—Ä—Ç—É–∞–ª–¥—ã –∂”ô—à—ñ–≥—ñ
"""
    
    await message.answer(
        welcome_text,
        parse_mode="HTML"
    )
    
    await state.set_state(AnonymousState.waiting_message)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>

1. –ù–∞–ø–∏—à–∏ /start
2. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –û–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –ø—Ä–∏–¥–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b>
* –¢–µ–∫—Å—Ç
* –§–æ—Ç–æ
* –í–∏–¥–µ–æ
* –î–æ–∫—É–º–µ–Ω—Ç—ã
* –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(AnonymousState.waiting_message)
async def handle_anonymous_message(message: Message, state: FSMContext):
    try:
        admin_text = f"üì© <b>–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        
        if message.text:
            admin_text += f"üí¨ –¢–µ–∫—Å—Ç: {message.text}"
            await asyncio.gather(
                bot.send_message(ADMIN_ID1, admin_text, parse_mode="HTML"),
                bot.send_message(ADMIN_ID2, admin_text, parse_mode="HTML")
            )
            
        elif message.photo:
            admin_text += "üì∏ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:" if message.caption else "üì∏ –§–æ—Ç–æ"
            caption = admin_text + (f"\n\n{message.caption}" if message.caption else "")
            await asyncio.gather(
                bot.send_photo(ADMIN_ID1, message.photo[-1].file_id, caption=caption, parse_mode="HTML"),
                bot.send_photo(ADMIN_ID2, message.photo[-1].file_id, caption=caption, parse_mode="HTML")
            )

        elif message.video:
            admin_text += "üé• –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é:" if message.caption else "üé• –í–∏–¥–µ–æ"
            caption = admin_text + (f"\n\n{message.caption}" if message.caption else "")
            await asyncio.gather(
                bot.send_video(ADMIN_ID1, message.video.file_id, caption=caption, parse_mode="HTML"),
                bot.send_video(ADMIN_ID2, message.video.file_id, caption=caption, parse_mode="HTML")
            )

        elif message.document:
            admin_text += "üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é:" if message.caption else "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
            caption = admin_text + (f"\n\n{message.caption}" if message.caption else "")
            await asyncio.gather(
                bot.send_document(ADMIN_ID1, message.document.file_id, caption=caption, parse_mode="HTML"),
                bot.send_document(ADMIN_ID2, message.document.file_id, caption=caption, parse_mode="HTML")
            )
            
        elif message.voice:
            admin_text += "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            await asyncio.gather(
                bot.send_voice(ADMIN_ID1, message.voice.file_id, caption=admin_text, parse_mode="HTML"),
                bot.send_voice(ADMIN_ID2, message.voice.file_id, caption=admin_text, parse_mode="HTML")
            )
            
        elif message.sticker:
            admin_text += "üòÑ –°—Ç–∏–∫–µ—Ä"
            await asyncio.gather(
                bot.send_sticker(ADMIN_ID1, message.sticker.file_id),
                bot.send_sticker(ADMIN_ID2, message.sticker.file_id)
            )
            await asyncio.gather(
                bot.send_message(ADMIN_ID1, admin_text, parse_mode="HTML"),
                bot.send_message(ADMIN_ID2, admin_text, parse_mode="HTML")
            )
            
        else:
            admin_text += "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"
            await asyncio.gather(
                bot.send_message(ADMIN_ID1, admin_text, parse_mode="HTML"),
                bot.send_message(ADMIN_ID2, admin_text, parse_mode="HTML")
            )
        
        await message.answer(
            "‚úÖ –¢–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )

@dp.message()
async def handle_other_messages(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

@dp.error()
async def error_handler(exception, update, bot):
    logging.error(f"–û—à–∏–±–∫–∞: {exception}")
    return True

async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
    )
    
    bot_info = await bot.get_me()
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
    
    try:
        startup_message = ("üöÄ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                          "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await asyncio.gather(
            bot.send_message(ADMIN_ID1, startup_message, parse_mode="HTML"),
            bot.send_message(ADMIN_ID2, startup_message, parse_mode="HTML")
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
    

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())